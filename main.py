import os
import sys
import random
import time
import logging
import telebot
from telebot import types
from flask import Flask, request

# ==========================================
# üîß –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø (–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û –î–õ–Ø RENDER!)
# ==========================================
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ],
    force=True  # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
)
logging.getLogger().setLevel(logging.INFO)
logger = logging.getLogger(__name__)

# –û—Ç–∫–ª—é—á–∞–µ–º –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—é stdout
sys.stdout.reconfigure(line_buffering=True) if hasattr(sys.stdout, 'reconfigure') else None

# –¢–∞–∫–∂–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è telebot
telebot_logger = logging.getLogger('TeleBot')
telebot_logger.setLevel(logging.INFO)

# --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ---
BOT_USERNAME = "mrpolygraph_bot"

# ‚ö†Ô∏è –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø RENDER
API_TOKEN = os.environ.get('BOT_TOKEN', '8320176221:AAE-Yhi95YxEp5P7f1_q2da9VeQeskofRCI')
SERVER_URL = os.environ.get("SERVER_URL", "https://polygraphbot.onrender.com")

WEBHOOK_PATH = '/'
WEBHOOK_URL = f"{SERVER_URL}{WEBHOOK_PATH}"

# ‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –ª–æ–∫–∞–ª—å–Ω—ã–º —Å—Ç–∏–∫–µ—Ä–∞–º
LOCAL_STICKER_PATHS = [
    'sticker1.webp',
    'sticker2.webp'
]

# üíæ –ö—ç—à file_id —Å—Ç–∏–∫–µ—Ä–æ–≤ (–∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ)
STICKER_FILE_IDS = []

bot = telebot.TeleBot(API_TOKEN)
app = Flask(__name__)

# –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –õ–æ–≥–∏ –°–†–ê–ó–£ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
print("=" * 60, flush=True)
print("ü§ñ BOT INITIALIZATION STARTED", flush=True)
print("=" * 60, flush=True)
logger.info("ü§ñ TeleBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
logger.info("üåê Flask app —Å–æ–∑–¥–∞–Ω")
sys.stdout.flush()


# ----------------------------------------------------------------------
# üåê 1. WEBHOOK –û–ë–†–ê–ë–û–¢–ß–ò–ö
# ----------------------------------------------------------------------
@app.route(WEBHOOK_PATH, methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ POST-–∑–∞–ø—Ä–æ—Å—ã –æ—Ç Telegram."""
    try:
        if request.headers.get('content-type') == 'application/json':
            json_string = request.get_data().decode('utf-8')
            logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Telegram (–¥–ª–∏–Ω–∞: {len(json_string)})")

            update = telebot.types.Update.de_json(json_string)
            logger.info(f"‚úÖ Webhook —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω, update_id: {update.update_id}")

            # –ü–µ—Ä–µ–¥–∞—ë–º update –≤ telebot –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ ‚Äî —ç—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç
            # —Å—Ä–∞–±–æ—Ç–∞—Ç—å inline-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –∏ –¥—Ä—É–≥–∏–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ö–µ–Ω–¥–ª–µ—Ä–∞–º.
            try:
                bot.process_new_updates([update])
                logger.info("‚úÖ Update –ø–µ—Ä–µ–¥–∞–Ω telebot.process_new_updates")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ update –≤ telebot: {e}", exc_info=True)
                # –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –≤—Ä—É—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å inline_query:
                # if update.inline_query:
                #     handle_inline_query_manually(update.inline_query)

            return '', 200
    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê –≤ webhook: {e}", exc_info=True)
        return 'ERROR', 500

    logger.warning("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –±–µ–∑ JSON")
    return 'OK', 200


# ----------------------------------------------------------------------
# üñºÔ∏è 2. –§–£–ù–ö–¶–ò–Ø –û–¢–ü–†–ê–í–ö–ò –ö–û–ù–¢–ï–ù–¢–ê
# ----------------------------------------------------------------------
def send_random_content_handler(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏–∫–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π file_id."""

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫—ç—à - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if STICKER_FILE_IDS:
        reply_id = message.reply_to_message.message_id if message.reply_to_message else message.message_id
        selected_file_id = random.choice(STICKER_FILE_IDS)

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ file_id - –º–≥–Ω–æ–≤–µ–Ω–Ω–æ, –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏!
            bot.send_sticker(
                chat_id=message.chat.id,
                sticker=selected_file_id,
                reply_to_message_id=reply_id
            )
            return
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ file_id: {e}")

    # Fallback: –µ—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é
    logger.warning("‚ö†Ô∏è –ö—ç—à file_id –ø—É—Å—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é")
    existing_stickers = [path for path in LOCAL_STICKER_PATHS if os.path.exists(path)]

    if not existing_stickers:
        logger.error(f"‚ùå –§–∞–π–ª—ã —Å—Ç–∏–∫–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        bot.reply_to(message, "üö´ –û—à–∏–±–∫–∞: –°—Ç–∏–∫–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        return

    reply_id = message.reply_to_message.message_id if message.reply_to_message else message.message_id
    selected_sticker = random.choice(existing_stickers)

    try:
        with open(selected_sticker, 'rb') as sticker_file:
            bot.send_sticker(
                chat_id=message.chat.id,
                sticker=sticker_file,
                reply_to_message_id=reply_id
            )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∏–∫–µ—Ä–∞: {e}", exc_info=True)
        bot.reply_to(message, f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.")


# ----------------------------------------------------------------------
# 3. INLINE-–û–ë–†–ê–ë–û–¢–ß–ò–ö
# ----------------------------------------------------------------------
print("=" * 60, flush=True)
print("üìã REGISTERING INLINE HANDLER", flush=True)
print("=" * 60, flush=True)


@bot.inline_handler(lambda query: True)
def query_text(inline_query):
    user_query = inline_query.query

    if user_query:
        title_text = f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å: {user_query}"
        message_content = f"@{BOT_USERNAME} {user_query}"
    else:
        title_text = "–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
        message_content = f"@{BOT_USERNAME} "

    r = types.InlineQueryResultArticle(
        id='1',
        title=title_text,
        input_message_content=types.InputTextMessageContent(message_text=message_content)
    )

    try:
        bot.answer_inline_query(inline_query.id, [r], cache_time=0)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ inline-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}", exc_info=True)


print("‚úÖ Inline handler registered", flush=True)
sys.stdout.flush()


# ----------------------------------------------------------------------
# üí¨ 4. –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í (–î–û –í–´–ó–û–í–ê setup_bot!)
# ----------------------------------------------------------------------
print("=" * 60, flush=True)
print("üìã REGISTERING MESSAGE HANDLERS", flush=True)
print("=" * 60, flush=True)
logger.info("üìã –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –ö–û–ú–ê–ù–î")
sys.stdout.flush()


@bot.message_handler(commands=['check'])
def handle_check(message):
    send_random_content_handler(message)


print("‚úÖ Handler registered: commands=['check']", flush=True)
sys.stdout.flush()


@bot.message_handler(content_types=['photo'], regexp='^/check($|\\s.*)')
def handle_photo_caption_check(message):
    send_random_content_handler(message)


print("‚úÖ Handler registered: photo + /check", flush=True)
sys.stdout.flush()


@bot.message_handler(content_types=['text'])
def send_random_image(message):
    if f'@{BOT_USERNAME}' in message.text:
        send_random_content_handler(message)


print("‚úÖ Handler registered: text (with @mention check)", flush=True)
sys.stdout.flush()


# –£–±–∏—Ä–∞–µ–º fallback handler - –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
print("=" * 60, flush=True)
print("üìã ALL HANDLERS REGISTERED!", flush=True)
print("=" * 60, flush=True)
sys.stdout.flush()


# ----------------------------------------------------------------------
# üìù 5. HEALTHCHECK ENDPOINT
# ----------------------------------------------------------------------
@app.route('/health', methods=['GET'])
def health():
    """Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞."""
    existing_stickers = [path for path in LOCAL_STICKER_PATHS if os.path.exists(path)]
    status = {
        'status': 'running',
        'stickers_found': len(existing_stickers),
        'sticker_files': existing_stickers,
        'current_dir': os.getcwd(),
        'all_files': os.listdir()[:20],  # –ü–µ—Ä–≤—ã–µ 20 —Ñ–∞–π–ª–æ–≤
        'webhook_url': WEBHOOK_URL
    }
    logger.info(f"üè• Health check –∑–∞–ø—Ä–æ—à–µ–Ω")
    return status, 200


# ----------------------------------------------------------------------
# üöÄ 6. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê (–í–´–ü–û–õ–ù–Ø–ï–¢–°–Ø –í–°–ï–ì–î–ê!)
# ----------------------------------------------------------------------
def upload_stickers_and_cache_ids():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∏–∫–µ—Ä—ã –æ–¥–∏–Ω —Ä–∞–∑ –∏ –∫—ç—à–∏—Ä—É–µ—Ç –∏—Ö file_id."""
    global STICKER_FILE_IDS
    STICKER_FILE_IDS = []

    logger.info("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ file_id...")

    # –ù—É–∂–µ–Ω chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Saved Messages
    test_chat_id = os.environ.get('ADMIN_CHAT_ID')

    if not test_chat_id:
        logger.warning("‚ö†Ô∏è ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ file_id")
        logger.warning("‚ö†Ô∏è –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–∞–∂–¥—ã–π —Ä–∞–∑")
        return

    for sticker_path in LOCAL_STICKER_PATHS:
        try:
            if not os.path.exists(sticker_path):
                logger.error(f"   ‚ùå {sticker_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                continue

            with open(sticker_path, 'rb') as sticker_file:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è file_id
                msg = bot.send_sticker(chat_id=test_chat_id, sticker=sticker_file)
                file_id = msg.sticker.file_id
                STICKER_FILE_IDS.append(file_id)
                logger.info(f"   ‚úÖ {sticker_path} ‚Üí file_id –∫—ç—à–∏—Ä–æ–≤–∞–Ω")

                # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    bot.delete_message(test_chat_id, msg.message_id)
                except:
                    pass

        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {sticker_path}: {e}")

    logger.info(f"‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–æ file_id: {len(STICKER_FILE_IDS)} —Å—Ç–∏–∫–µ—Ä–æ–≤")


def setup_bot():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ - –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è"""
    logger.info("=" * 60)
    logger.info("üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø TELEGRAM –ë–û–¢–ê")
    logger.info("=" * 60)
    logger.info(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    logger.info(f"üé® –û–∂–∏–¥–∞–µ–º—ã–µ —Å—Ç–∏–∫–µ—Ä—ã: {LOCAL_STICKER_PATHS}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∏–∫–µ—Ä—ã
    for sticker_path in LOCAL_STICKER_PATHS:
        if os.path.exists(sticker_path):
            size = os.path.getsize(sticker_path)
            logger.info(f"   ‚úÖ {sticker_path} ({size} –±–∞–π—Ç)")
        else:
            logger.error(f"   ‚ùå {sticker_path} –ù–ï –ù–ê–ô–î–ï–ù!")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∏–∫–µ—Ä—ã –∏ –∫—ç—à–∏—Ä—É–µ–º file_id
    upload_stickers_and_cache_ids()

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
    logger.info("üåê –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook...")
    try:
        bot.remove_webhook()
        time.sleep(1)
        # –í–∞–∂–Ω–æ: —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ inline_query –≤ allowed_updates
        s = bot.set_webhook(url=WEBHOOK_URL, allowed_updates=['message', 'inline_query', 'edited_message'])

        if s:
            logger.info(f"   ‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL} (allowed_updates includes inline_query)")
        else:
            logger.error("   ‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook")
    except Exception as e:
        logger.error(f"   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}", exc_info=True)

    logger.info("=" * 60)
    logger.info("‚úÖ –ë–û–¢ –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï")
    logger.info("=" * 60)
    sys.stdout.flush()


# ‚ö†Ô∏è –í–´–ó–´–í–ê–ï–ú setup_bot() –°–†–ê–ó–£ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
setup_bot()


# ----------------------------------------------------------------------
# üöÄ 7. –ó–ê–ü–£–°–ö FLASK (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä—è–º–æ–º –∑–∞–ø—É—Å–∫–µ)
# ----------------------------------------------------------------------
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Flask –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host='0.0.0.0', port=port, debug=False)
