import os
import sys
import random
import time
import logging
import telebot
from telebot import types 
from flask import Flask, request

# ==========================================
# üîß –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø (–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û –î–õ–Ø RENDER!)
# ==========================================
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ],
    force=True  # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
)
logging.getLogger().setLevel(logging.INFO)
logger = logging.getLogger(__name__)

# –û—Ç–∫–ª—é—á–∞–µ–º –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—é stdout
sys.stdout.reconfigure(line_buffering=True) if hasattr(sys.stdout, 'reconfigure') else None

# –¢–∞–∫–∂–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è telebot
telebot_logger = logging.getLogger('TeleBot')
telebot_logger.setLevel(logging.INFO)

# --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ---
BOT_USERNAME = "mrpolygraph_bot"

# ‚ö†Ô∏è –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø RENDER
API_TOKEN = os.environ.get('BOT_TOKEN', '8320176221:AAE-Yhi95YxEp5P7f1_q2da9VeQeskofRCI') 
SERVER_URL = os.environ.get("SERVER_URL", "https://polygraphbot.onrender.com")

WEBHOOK_PATH = '/'
WEBHOOK_URL = f"{SERVER_URL}{WEBHOOK_PATH}"

# ‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –ª–æ–∫–∞–ª—å–Ω—ã–º —Å—Ç–∏–∫–µ—Ä–∞–º
LOCAL_STICKER_PATHS = [
    'sticker1.webp', 
    'sticker2.webp'
]

bot = telebot.TeleBot(API_TOKEN)
app = Flask(__name__)

# –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –õ–æ–≥–∏ –°–†–ê–ó–£ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
print("=" * 60, flush=True)
print("ü§ñ BOT INITIALIZATION STARTED", flush=True)
print("=" * 60, flush=True)
logger.info("ü§ñ TeleBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
logger.info("üåê Flask app —Å–æ–∑–¥–∞–Ω")
sys.stdout.flush()


# ----------------------------------------------------------------------
# üåê 1. WEBHOOK –û–ë–†–ê–ë–û–¢–ß–ò–ö (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
# ----------------------------------------------------------------------
@app.route(WEBHOOK_PATH, methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ POST-–∑–∞–ø—Ä–æ—Å—ã –æ—Ç Telegram."""
    try:
        if request.headers.get('content-type') == 'application/json':
            json_string = request.get_data().decode('utf-8')
            update = telebot.types.Update.de_json(json_string)
            logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω webhook, update_id: {update.update_id}")

            # -----------------------------------------------------------
            # üîç –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï (–∏–∑ –≤–∞—à–µ–≥–æ –∫–æ–¥–∞)
            # -----------------------------------------------------------
            if update.message:
                msg = update.message
                logger.info(f"   –¢–∏–ø: Message, chat_id: {msg.chat.id}, user: {msg.from_user.id}")
                logger.info(f"   –¢–µ–∫—Å—Ç: '{msg.text}' (Content type: {msg.content_type})")
            
            elif update.inline_query:
                query = update.inline_query
                logger.info(f"   –¢–∏–ø: InlineQuery, user: {query.from_user.id}")
                logger.info(f"   –ó–∞–ø—Ä–æ—Å: '{query.query}'")
            
            else:
                logger.info(f"   –¢–∏–ø: –î—Ä—É–≥–æ–π (–Ω–µ message –∏ –Ω–µ inline query)")

            # -----------------------------------------------------------
            # ‚úÖ –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –ü–†–ê–í–ò–õ–¨–ù–´–ô –í–´–ó–û–í –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê
            # -----------------------------------------------------------
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ 'process_new_messages' –∏ '–ü–æ–ø—ã—Ç–∫–∞ 2'
            # –í—ã–∑—ã–≤–∞–µ–º –û–î–ò–ù —Ä–∞–∑ 'process_new_updates' –¥–ª—è –í–°–ï–ì–û –æ–±—ä–µ–∫—Ç–∞ 'update'
            try:
                bot.process_new_updates([update])
                logger.info("   ‚úÖ process_new_updates –≤—ã–ø–æ–ª–Ω–µ–Ω")
            except Exception as e:
                logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è process_new_updates: {e}", exc_info=True)

            return '', 200
            
    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ webhook: {e}", exc_info=True)
        return 'ERROR', 500
    
    logger.warning("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –±–µ–∑ JSON")
    return 'OK', 200


# ----------------------------------------------------------------------
# üñºÔ∏è 2. –§–£–ù–ö–¶–ò–Ø –û–¢–ü–†–ê–í–ö–ò –ö–û–ù–¢–ï–ù–¢–ê
# ----------------------------------------------------------------------
def send_random_content_handler(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏–∫–µ—Ä –∏–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤."""
    logger.info(f"üéØ send_random_content_handler –≤—ã–∑–≤–∞–Ω –¥–ª—è chat_id={message.chat.id}, user={message.from_user.id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    existing_stickers = [path for path in LOCAL_STICKER_PATHS if os.path.exists(path)]
    
    if not existing_stickers:
        logger.error(f"‚ùå –ù–∏ –æ–¥–∏–Ω —Ñ–∞–π–ª —Å—Ç–∏–∫–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        logger.error(f"   –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
        logger.error(f"   –§–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {os.listdir()}")
        bot.reply_to(message, "üö´ –û—à–∏–±–∫–∞: –§–∞–π–ª—ã —Å—Ç–∏–∫–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
        return
    
    reply_id = message.reply_to_message.message_id if message.reply_to_message else message.message_id
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏–∫–µ—Ä
    selected_sticker = random.choice(existing_stickers)
    logger.info(f"‚úÖ –í—ã–±—Ä–∞–Ω —Å—Ç–∏–∫–µ—Ä: {selected_sticker}")

    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Å—Ç–∏–∫–µ—Ä
        with open(selected_sticker, 'rb') as sticker_file:
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –≤ —á–∞—Ç {message.chat.id}...")
            result = bot.send_sticker(
                chat_id=message.chat.id,
                sticker=sticker_file, 
                reply_to_message_id=reply_id
            )
            logger.info(f"‚úÖ –°—Ç–∏–∫–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ! Message ID: {result.message_id}")
        
    except FileNotFoundError:
        logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {selected_sticker}")
        bot.reply_to(message, f"üö´ –§–∞–π–ª {selected_sticker} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∏–∫–µ—Ä–∞: {type(e).__name__}: {e}", exc_info=True)
        bot.reply_to(message, f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")


# ----------------------------------------------------------------------
# 3. INLINE-–û–ë–†–ê–ë–û–¢–ß–ò–ö
# ----------------------------------------------------------------------
@bot.inline_handler(lambda query: True)
def query_text(inline_query):
    logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω inline query –æ—Ç {inline_query.from_user.id}: '{inline_query.query}'")
    user_query = inline_query.query

    if user_query:
        title_text = f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å: {user_query}"
        message_content = f"@{BOT_USERNAME} {user_query}"
    else:
        title_text = "–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
        message_content = f"@{BOT_USERNAME} "

    r = types.InlineQueryResultArticle(
        id='1',
        title=title_text,
        input_message_content=types.InputTextMessageContent(message_text=message_content)
    )

    try:
        bot.answer_inline_query(inline_query.id, [r], cache_time=0)
        logger.info(f"‚úÖ Inline query –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ inline-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}", exc_info=True)


# ----------------------------------------------------------------------
# üí¨ 4. –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í (–î–û –í–´–ó–û–í–ê setup_bot!)
# ----------------------------------------------------------------------
print("=" * 60, flush=True)
print("üìã REGISTERING MESSAGE HANDLERS", flush=True)
print("=" * 60, flush=True)
logger.info("üìã –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –ö–û–ú–ê–ù–î")
sys.stdout.flush()

@bot.message_handler(commands=['check'])
def handle_check(message):
    logger.info(f"üí¨ –û–ë–†–ê–ë–û–¢–ß–ò–ö /check –°–†–ê–ë–û–¢–ê–õ! user_id={message.from_user.id}")
    send_random_content_handler(message)

print("‚úÖ Handler registered: commands=['check']", flush=True)
logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫: commands=['check']")
sys.stdout.flush()


@bot.message_handler(content_types=['photo'], regexp='^/check($|\\s.*)')
def handle_photo_caption_check(message):
    logger.info(f"üì∏ –û–ë–†–ê–ë–û–¢–ß–ò–ö photo+/check –°–†–ê–ë–û–¢–ê–õ! user_id={message.from_user.id}")
    send_random_content_handler(message)

print("‚úÖ Handler registered: photo + /check", flush=True)
logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫: photo + /check")
sys.stdout.flush()


@bot.message_handler(content_types=['text'])
def send_random_image(message):
    logger.info(f"üìù –û–ë–†–ê–ë–û–¢–ß–ò–ö text –°–†–ê–ë–û–¢–ê–õ –æ—Ç {message.from_user.id}: '{message.text[:50]}'")
    if f'@{BOT_USERNAME}' in message.text:
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ @{BOT_USERNAME}")
        send_random_content_handler(message)
    else:
        logger.info(f"‚è≠Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç @{BOT_USERNAME}")

print("‚úÖ Handler registered: text", flush=True)
logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫: content_types=['text']")
sys.stdout.flush()


@bot.message_handler(func=lambda m: True, content_types=['text', 'photo', 'document', 'sticker'])
def fallback_handler(message):
    logger.warning(f"‚ö†Ô∏è FALLBACK —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è {message.from_user.id}")
    bot.reply_to(message, "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /check")

print("‚úÖ Handler registered: fallback", flush=True)
logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫: fallback (func=lambda)")
print("=" * 60, flush=True)
print("üìã ALL HANDLERS REGISTERED!", flush=True)
print("=" * 60, flush=True)
sys.stdout.flush()


# ----------------------------------------------------------------------
# üìù 5. HEALTHCHECK ENDPOINT
# ----------------------------------------------------------------------
@app.route('/health', methods=['GET'])
def health():
    """Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞."""
    existing_stickers = [path for path in LOCAL_STICKER_PATHS if os.path.exists(path)]
    status = {
        'status': 'running',
        'stickers_found': len(existing_stickers),
        'sticker_files': existing_stickers,
        'current_dir': os.getcwd(),
        'all_files': os.listdir()[:20],  # –ü–µ—Ä–≤—ã–µ 20 —Ñ–∞–π–ª–æ–≤
        'webhook_url': WEBHOOK_URL
    }
    logger.info(f"üè• Health check –∑–∞–ø—Ä–æ—à–µ–Ω")
    return status, 200


# ----------------------------------------------------------------------
# üöÄ 6. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê (–í–´–ü–û–õ–ù–Ø–ï–¢–°–Ø –í–°–ï–ì–î–ê!)
# ----------------------------------------------------------------------
def setup_bot():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ - –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è"""
    logger.info("=" * 60)
    logger.info("üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø TELEGRAM –ë–û–¢–ê")
    logger.info("=" * 60)
    logger.info(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    logger.info(f"üé® –û–∂–∏–¥–∞–µ–º—ã–µ —Å—Ç–∏–∫–µ—Ä—ã: {LOCAL_STICKER_PATHS}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∏–∫–µ—Ä—ã
    for sticker_path in LOCAL_STICKER_PATHS:
        if os.path.exists(sticker_path):
            size = os.path.getsize(sticker_path)
            logger.info(f"   ‚úÖ {sticker_path} ({size} –±–∞–π—Ç)")
        else:
            logger.error(f"   ‚ùå {sticker_path} –ù–ï –ù–ê–ô–î–ï–ù!")
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
    logger.info("üåê –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook...")
    try:
        bot.remove_webhook()
        time.sleep(1)
        s = bot.set_webhook(url=WEBHOOK_URL)
        
        if s:
            logger.info(f"   ‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
            webhook_info = bot.get_webhook_info()
            logger.info(f"   üìä Pending updates: {webhook_info.pending_update_count}")
            if webhook_info.last_error_date:
                logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞: {webhook_info.last_error_message}")
        else:
            logger.error("   ‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook")
    except Exception as e:
        logger.error(f"   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}", exc_info=True)
    
    logger.info("=" * 60)
    logger.info("‚úÖ –ë–û–¢–ê –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï")
    logger.info("=" * 60)
    sys.stdout.flush()


# ‚ö†Ô∏è –í–´–ó–´–í–ê–ï–ú setup_bot() –°–†–ê–ó–£ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
setup_bot()


# ----------------------------------------------------------------------
# üöÄ 7. –ó–ê–ü–£–°–ö FLASK (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä—è–º–æ–º –∑–∞–ø—É—Å–∫–µ)
# ----------------------------------------------------------------------
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Flask –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host='0.0.0.0', port=port, debug=False)
