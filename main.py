import os
import random
import time
import pip
import telebot
from telebot import types 
from flask import Flask, request

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ---
try:
    import telebot
    from flask import Flask, request
except ImportError:
    pip.main(['install', 'pytelegrambotapi', 'Flask'])
    import telebot
    from flask import Flask, request

# --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ---
BOT_USERNAME = "mrpolygraph_bot"

# ‚ö†Ô∏è –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø RENDER
API_TOKEN = os.environ.get('BOT_TOKEN', '8320176221:AAE-Yhi95YxEp5P7f1_q2da9VeQeskofRCI') 
SERVER_URL = os.environ.get("SERVER_URL", "https://polygraphbot.onrender.com")

WEBHOOK_PATH = '/'
WEBHOOK_URL = f"{SERVER_URL}{WEBHOOK_PATH}"

# ‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –ª–æ–∫–∞–ª—å–Ω—ã–º —Å—Ç–∏–∫–µ—Ä–∞–º
LOCAL_STICKER_PATHS = [
    'sticker1.webp', 
    'sticker2.webp'
]

# üí° –ù–û–í–ê–Ø –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ü–ï–†–ï–ú–ï–ù–ù–ê–Ø: –ó–¥–µ—Å—å –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è ID —Å—Ç–∏–∫–µ—Ä–æ–≤ Telegram
# –≠—Ç–æ –∫–ª—é—á–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–±–ª–µ–º—ã.
STICKER_IDS = [] 

bot = telebot.TeleBot(API_TOKEN)
app = Flask(__name__) # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask


# ----------------------------------------------------------------------
# üåê 1. WEBHOOK –û–ë–†–ê–ë–û–¢–ß–ò–ö 
# ----------------------------------------------------------------------
@app.route(WEBHOOK_PATH, methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ POST-–∑–∞–ø—Ä–æ—Å—ã –æ—Ç Telegram."""
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return '', 200
    return 'OK', 200


# ----------------------------------------------------------------------
# üñºÔ∏è 2. –§–£–ù–ö–¶–ò–Ø –û–¢–ü–†–ê–í–ö–ò –ö–û–ù–¢–ï–ù–¢–ê (–ò—Å–ø–æ–ª—å–∑—É–µ–º File ID)
# ----------------------------------------------------------------------
def send_random_content_handler(message):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É—è File ID."""
    global STICKER_IDS # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ ID
    
    if not STICKER_IDS:
         print("DEBUG: –°–ø–∏—Å–æ–∫ STICKER_IDS –ø—É—Å—Ç. –°—Ç–∏–∫–µ—Ä—ã –Ω–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ!")
         bot.reply_to(message, "üö´ –û—à–∏–±–∫–∞: –°—Ç–∏–∫–µ—Ä—ã –Ω–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞.")
         return
         
    reply_id = message.reply_to_message.message_id if message.reply_to_message else message.message_id
    
    # üí° –í—ã–±–∏—Ä–∞–µ–º File ID, –∞ –Ω–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    selected_sticker_id = random.choice(STICKER_IDS)

    try:
        # üí° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –ø–æ ID, —á—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Render
        bot.send_sticker(
            chat_id=message.chat.id,
            sticker=selected_sticker_id, 
            reply_to_message_id=reply_id
        )
    
    except Exception as e:
        print(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ ID: {type(e).__name__}: {e}")
        bot.reply_to(message,
                     f"üö´ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∏–∫–µ—Ä–∞ –ø–æ ID: {e}. –°–º. –ª–æ–≥ Render.")


# ----------------------------------------------------------------------
# 3. INLINE-–û–ë–†–ê–ë–û–¢–ß–ò–ö (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
# ----------------------------------------------------------------------
@bot.inline_handler(lambda query: True)
def query_text(inline_query):
    user_query = inline_query.query

    if user_query:
        title_text = f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å: {user_query}"
        message_content = f"@{BOT_USERNAME} {user_query}"
    else:
        title_text = "–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
        message_content = f"@{BOT_USERNAME} "

    r = types.InlineQueryResultArticle(
        id='1',
        title=title_text,
        input_message_content=types.InputTextMessageContent(message_text=message_content)
    )

    try:
        bot.answer_inline_query(inline_query.id, [r], cache_time=0)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ inline-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}")


# ----------------------------------------------------------------------
# üí¨ 4. –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
# ----------------------------------------------------------------------
@bot.message_handler(content_types=['photo'], regexp='^/check($|\\s.*)')
def handle_photo_caption_check(message):
    send_random_content_handler(message)


@bot.message_handler(commands=['check'])
def handle_check(message):
    send_random_content_handler(message)


@bot.message_handler(content_types=['text'])
def send_random_image(message):
    if f'@{BOT_USERNAME}' in message.text:
        send_random_content_handler(message)


# ----------------------------------------------------------------------
# üöÄ 5. –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê
# ----------------------------------------------------------------------

# üí° –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò –°–¢–ò–ö–ï–†–û–í
def upload_stickers():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∏–∫–µ—Ä—ã –≤ Telegram, –ø–æ–ª—É—á–∞–µ—Ç –∏—Ö ID –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ STICKER_IDS."""
    global STICKER_IDS
    STICKER_IDS = []
    
    print("--- –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞ Telegram ---")
    
    for path in LOCAL_STICKER_PATHS:
        try:
            with open(path, 'rb') as sticker_file:
                # üí° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä —Å–∞–º–æ–º—É —Å–µ–±–µ –∏–ª–∏ –≤ –ª—é–±–æ–π —á–∞—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è file_id
                # –ù–æ –º—ã –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º send_sticker, —á—Ç–æ–±—ã Telegram –≤–µ—Ä–Ω—É–ª –æ–±—ä–µ–∫—Ç Message
                
                # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: Telegram –≤–µ—Ä–Ω–µ—Ç –æ–±—ä–µ–∫—Ç Message, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –º—ã –≤–æ–∑—å–º–µ–º file_id
                message = bot.send_sticker(
                    chat_id=bot.get_me().id, # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä —Å–∞–º–æ–º—É –±–æ—Ç—É (–≤ –µ–≥–æ –ª–∏—á–Ω—ã–π —á–∞—Ç)
                    sticker=sticker_file
                )
                
                file_id = message.sticker.file_id
                STICKER_IDS.append(file_id)
                print(f"‚úÖ –°—Ç–∏–∫–µ—Ä {path} –∑–∞–≥—Ä—É–∂–µ–Ω. ID: {file_id}")
                
        except FileNotFoundError:
            print(f"‚ùå –û–®–ò–ë–ö–ê: –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å—Ç–∏–∫–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π!")
            # –ï—Å–ª–∏ FileNotFoundError —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –∑–¥–µ—Å—å, —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å—Ç–∏–∫–µ—Ä–æ–≤ –Ω–µ—Ç –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ Render
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∏–∫–µ—Ä {path}. –û—à–∏–±–∫–∞: {e}")
            
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–∞–º —Å–µ–±–µ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
    try:
        for message_id in range(message.message_id, message.message_id - len(LOCAL_STICKER_PATHS), -1):
             bot.delete_message(bot.get_me().id, message_id)
    except Exception:
        pass
        
    print(f"--- –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ ID —Å—Ç–∏–∫–µ—Ä–æ–≤: {len(STICKER_IDS)} ---")


if __name__ == "__main__":
    
    # 0. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—É—Ç–∏ –∏ —Ñ–∞–π–ª–æ–≤ (–û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏)
    print(f"--- –¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()} ---")
    print(f"--- –§–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {os.listdir()} ---")
    
    # 1. –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤ –Ω–∞ Telegram –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–µ—Ä–≤–æ–π, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å STICKER_IDS
    upload_stickers() 
    
    # 2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
    print("--- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ ---")
    bot.remove_webhook()
    time.sleep(1) 
    print(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –≤–µ–±—Ö—É–∫–∞: {WEBHOOK_URL}")
    s = bot.set_webhook(url=WEBHOOK_URL)
    
    if s:
        print("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Webhook.")

    # 3. –ó–∞–ø—É—Å–∫ Flask
    port = int(os.environ.get("PORT", 5000))
    print(f"--- –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç {port} ---")
    app.run(host='0.0.0.0', port=port)
