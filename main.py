# -*- coding: utf-8 -*-
"""–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –±–æ—Ç–∞ (Webhook)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RqXZUwsQb1xq0qBVxEmoIIjwi9Zw32T_
"""

import os
import random
import time
# –£–î–ê–õ–ï–ù–û: from background import keep_alive
import pip
import telebot
from telebot import types
from flask import Flask, request # –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´ –î–õ–Ø –í–ï–ë–•–£–ö–û–í

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ---
# (–û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –Ω–∞ Render –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å requirements.txt)
try:
    import telebot
    from flask import Flask, request
except ImportError:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º list –¥–ª—è pip.main, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ —Å None
    pip.main(['install', 'pytelegrambotapi', 'Flask'])
    import telebot
    from flask import Flask, request

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_USERNAME = "mrpolygraph_bot"

# ‚ö†Ô∏è –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø RENDER
# –≠—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ
API_TOKEN = os.environ.get('BOT_TOKEN', '8320176221:AAE-Yhi95YxEp5P7f1_q2da9VeQeskofRCI')
SERVER_URL = os.environ.get("SERVER_URL", "https://your-app-name.onrender.com")

WEBHOOK_PATH = '/'
WEBHOOK_URL = f"{SERVER_URL}{WEBHOOK_PATH}"

# ‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º —Å—Ç–∏–∫–µ—Ä–æ–≤ (—É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ Render)
STICKER_FILES = [
    'sticker1.webp',
    'sticker2.webp'
]

bot = telebot.TeleBot(API_TOKEN)
app = Flask(__name__) # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask


# ----------------------------------------------------------------------
# üåê 1. WEBHOOK –û–ë–†–ê–ë–û–¢–ß–ò–ö (–ö–†–ò–¢–ò–ß–ù–û –î–õ–Ø RENDER)
# ----------------------------------------------------------------------
@app.route(WEBHOOK_PATH, methods=['POST'])
def webhook():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç Telegram
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return '', 200
    return 'OK', 200

# ----------------------------------------------------------------------
# üñºÔ∏è 2. –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò –ö–û–ù–¢–ï–ù–¢–ê
# ----------------------------------------------------------------------
def send_random_content_handler(message):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞/—Ñ–∞–π–ª–∞."""

    if not STICKER_FILES:
         bot.reply_to(message, "üö´ –û—à–∏–±–∫–∞: –°–ø–∏—Å–æ–∫ —Å—Ç–∏–∫–µ—Ä–æ–≤ –ø—É—Å—Ç.")
         return

    reply_id = message.reply_to_message.message_id if message.reply_to_message else message.message_id
    selected_sticker_path = random.choice(STICKER_FILES)

    try:
        with open(selected_sticker_path, 'rb') as sticker_file:
            bot.send_document(
                chat_id=message.chat.id,
                document=sticker_file,
                reply_to_message_id=reply_id
            )
    except FileNotFoundError:
        bot.reply_to(message,
                     f"üö´ –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å—Ç–∏–∫–µ—Ä–∞ '{selected_sticker_path}'.")
    except Exception as e:
        bot.reply_to(message,
                     f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}.")


# ----------------------------------------------------------------------
# üí° 3. INLINE-–û–ë–†–ê–ë–û–¢–ß–ò–ö (–ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à —Ç–µ–∫—É—â–∏–π —Ä–∞–±–æ—á–∏–π –∫–æ–¥)
# ----------------------------------------------------------------------
@bot.inline_handler(lambda query: True)
def query_text(inline_query):
    user_query = inline_query.query

    if user_query:
        title_text = f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å: {user_query}"
        message_content = f"@{BOT_USERNAME} {user_query}"
    else:
        title_text = "–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
        message_content = f"@{BOT_USERNAME} "

    r = types.InlineQueryResultArticle(
        id='1',
        title=title_text,
        input_message_content=types.InputTextMessageContent(message_text=message_content)
    )

    try:
        # cache_time=0 –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        bot.answer_inline_query(inline_query.id, [r], cache_time=0)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ inline-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}")


# ----------------------------------------------------------------------
# üí¨ 4. –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö
# ----------------------------------------------------------------------

# 1. –û–ë–†–ê–ë–û–¢–ß–ò–ö: /check –∫–∞–∫ –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ
@bot.message_handler(content_types=['photo'], regexp='^/check($|\\s.*)')
def handle_photo_caption_check(message):
    send_random_content_handler(message)


# 2. –û–ë–†–ê–ë–û–¢–ß–ò–ö: –∫–æ–º–∞–Ω–¥–∞ /check
@bot.message_handler(commands=['check'])
def handle_check(message):
    send_random_content_handler(message)


# 3. –û–ë–†–ê–ë–û–¢–ß–ò–ö: –í—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–≥–æ–º (@mrpgraph_bot)
@bot.message_handler(content_types=['text'])
def send_random_image(message):
    if f'@{BOT_USERNAME}' in message.text:
        send_random_content_handler(message)


# ----------------------------------------------------------------------
# üöÄ 5. –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê (–ö–†–ò–¢–ò–ß–ù–û –î–õ–Ø RENDER)
# ----------------------------------------------------------------------

if __name__ == "__main__":
    # 1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–∞
    print("–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –≤–µ–±—Ö—É–∫–∞...")
    bot.remove_webhook()
    time.sleep(1)
    print(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –≤–µ–±—Ö—É–∫–∞: {WEBHOOK_URL}")
    s = bot.set_webhook(url=WEBHOOK_URL)

    if s:
        print("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Webhook.")

    # 2. –ó–∞–ø—É—Å–∫ Flask –Ω–∞ –ø–æ—Ä—Ç—É, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º Render (–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è PORT)
    port = int(os.environ.get("PORT", 5000))
    # –ù–∞ Render, Flask –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Gunicorn (—Å–º. Start Command)
    app.run(host='0.0.0.0', port=port)