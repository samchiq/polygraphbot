import os
import random
import time
import pip
import telebot
from telebot import types 
from flask import Flask, request

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (–æ—Å—Ç–∞–µ—Ç—Å—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏) ---
try:
    import telebot
    from flask import Flask, request
except ImportError:
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    pip.main(['install', 'pytelegrambotapi', 'Flask'])
    import telebot
    from flask import Flask, request

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_USERNAME = "mrpolygraph_bot"

# ‚ö†Ô∏è –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø RENDER
# BOT_TOKEN –∏ SERVER_URL –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Render
API_TOKEN = os.environ.get('BOT_TOKEN', '8320176221:AAE-Yhi95YxEp5P7f1_q2da9VeQeskofRCI') 
SERVER_URL = os.environ.get("SERVER_URL", "https://polygraphbot.onrender.com")

WEBHOOK_PATH = '/'
WEBHOOK_URL = f"{SERVER_URL}{WEBHOOK_PATH}"

# ‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º —Å—Ç–∏–∫–µ—Ä–æ–≤ (—É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∏ –≤ –∫–æ—Ä–Ω–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è)
STICKER_FILES = [
    'sticker1.webp', 
    'sticker2.webp'
]

bot = telebot.TeleBot(API_TOKEN)
app = Flask(__name__) # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask


# ----------------------------------------------------------------------
# üåê 1. WEBHOOK –û–ë–†–ê–ë–û–¢–ß–ò–ö (–ö—Ä–∏—Ç–∏—á–µ–Ω –¥–ª—è Render)
# ----------------------------------------------------------------------
@app.route(WEBHOOK_PATH, methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ POST-–∑–∞–ø—Ä–æ—Å—ã –æ—Ç Telegram."""
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return '', 200
    return 'OK', 200


# ----------------------------------------------------------------------
# üñºÔ∏è 2. –§–£–ù–ö–¶–ò–Ø –û–¢–ü–†–ê–í–ö–ò –ö–û–ù–¢–ï–ù–¢–ê (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ send_sticker + –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞)
# ----------------------------------------------------------------------
def send_random_content_handler(message):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞ –∫–∞–∫ —Å—Ç–∏–∫–µ—Ä–∞."""
    
    if not STICKER_FILES:
         print("DEBUG: –°–ø–∏—Å–æ–∫ —Å—Ç–∏–∫–µ—Ä–æ–≤ STICKER_FILES –ø—É—Å—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
         return
         
    reply_id = message.reply_to_message.message_id if message.reply_to_message else message.message_id
    selected_sticker_path = random.choice(STICKER_FILES)

    try:
        # üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º send_sticker –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ WEBP-—Ñ–∞–π–ª–æ–≤
        with open(selected_sticker_path, 'rb') as sticker_file:
            bot.send_sticker(
                chat_id=message.chat.id,
                sticker=sticker_file, # –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ 'sticker'
                reply_to_message_id=reply_id
            )
    
    # üö® –õ–û–í–ò–ú –ò –õ–û–ì–ò–†–£–ï–ú –¢–û–ß–ù–£–Æ –û–®–ò–ë–ö–£ (–¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤ –ª–æ–≥–∞—Ö Render)
    except FileNotFoundError:
        print(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {selected_sticker_path}.")
        bot.reply_to(message,
                     f"üö´ –û—à–∏–±–∫–∞: –§–∞–π–ª '{selected_sticker_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–º. –ª–æ–≥ Render.")
    
    except Exception as e:
        print(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {type(e).__name__}: {e}")
        bot.reply_to(message,
                     f"üö´ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}. –°–º. –ª–æ–≥ Render.")


# ----------------------------------------------------------------------
# üí° 3. INLINE-–û–ë–†–ê–ë–û–¢–ß–ò–ö 
# ----------------------------------------------------------------------
@bot.inline_handler(lambda query: True)
def query_text(inline_query):
    user_query = inline_query.query

    if user_query:
        title_text = f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å: {user_query}"
        message_content = f"@{BOT_USERNAME} {user_query}"
    else:
        title_text = "–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
        message_content = f"@{BOT_USERNAME} "

    r = types.InlineQueryResultArticle(
        id='1',
        title=title_text,
        input_message_content=types.InputTextMessageContent(message_text=message_content)
    )

    try:
        bot.answer_inline_query(inline_query.id, [r], cache_time=0)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ inline-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}")


# ----------------------------------------------------------------------
# üí¨ 4. –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö
# ----------------------------------------------------------------------

# 1. –û–ë–†–ê–ë–û–¢–ß–ò–ö: /check –∫–∞–∫ –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ
@bot.message_handler(content_types=['photo'], regexp='^/check($|\\s.*)')
def handle_photo_caption_check(message):
    send_random_content_handler(message)


# 2. –û–ë–†–ê–ë–û–¢–ß–ò–ö: –∫–æ–º–∞–Ω–¥–∞ /check
@bot.message_handler(commands=['check'])
def handle_check(message):
    send_random_content_handler(message)


# 3. –û–ë–†–ê–ë–û–¢–ß–ò–ö: –í—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–≥–æ–º (@mrpgraph_bot)
@bot.message_handler(content_types=['text'])
def send_random_image(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ @mrpolygraph_bot
    if f'@{BOT_USERNAME}' in message.text:
        send_random_content_handler(message)


# ----------------------------------------------------------------------
# üöÄ 5. –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê
# ----------------------------------------------------------------------

if __name__ == "__main__":
    # 1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–∞
    print("--- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---")
    print("–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –≤–µ–±—Ö—É–∫–∞...")
    bot.remove_webhook()
    time.sleep(1) 
    print(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –≤–µ–±—Ö—É–∫–∞: {WEBHOOK_URL}")
    s = bot.set_webhook(url=WEBHOOK_URL)
    
    if s:
        print("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Webhook.")

    # 2. –ó–∞–ø—É—Å–∫ Flask –Ω–∞ –ø–æ—Ä—Ç—É, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º Render (–∏—Å–ø–æ–ª—å–∑—É–µ–º os.environ.get("PORT"))
    port = int(os.environ.get("PORT", 5000))
    print(f"--- –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç {port} ---")
    # Gunicorn –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å app
    app.run(host='0.0.0.0', port=port)
